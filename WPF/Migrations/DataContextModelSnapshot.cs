// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WPF.Data;

#nullable disable

namespace WPF.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WPF.MaterialObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Backing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Durability")
                        .HasColumnType("int");

                    b.Property<double>("EndToMatchOffset")
                        .HasColumnType("float");

                    b.Property<double>("HorzRepeat")
                        .HasColumnType("float");

                    b.Property<string>("Pattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Railroaded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RepeatAcrossWidth")
                        .HasColumnType("float");

                    b.Property<double>("RepeatDownLength")
                        .HasColumnType("float");

                    b.Property<double>("RollWidth")
                        .HasColumnType("float");

                    b.Property<double>("SalvageToMatchOffset")
                        .HasColumnType("float");

                    b.Property<double>("StretchAcrossWidth")
                        .HasColumnType("float");

                    b.Property<double>("StretchDownLength")
                        .HasColumnType("float");

                    b.Property<double>("UsableWidth")
                        .HasColumnType("float");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("VertRepeat")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("WPF.Models.ApprovedMatchObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<string>("MatchType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("ApprovedMatches");
                });

            modelBuilder.Entity("WPF.Models.ImageObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WPF.Models.NoteObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("WPF.Models.ApprovedMatchObject", b =>
                {
                    b.HasOne("WPF.MaterialObject", "Material")
                        .WithMany("ApprovedMatches")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("WPF.Models.ImageObject", b =>
                {
                    b.HasOne("WPF.MaterialObject", "Material")
                        .WithMany("Images")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("WPF.Models.NoteObject", b =>
                {
                    b.HasOne("WPF.MaterialObject", "Material")
                        .WithMany("Notes")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("WPF.MaterialObject", b =>
                {
                    b.Navigation("ApprovedMatches");

                    b.Navigation("Images");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
